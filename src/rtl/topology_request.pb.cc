// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: topology_request.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "topology_request.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace molemind {
namespace sdm {
namespace io {

namespace {

const ::google::protobuf::Descriptor* topoolgy_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  topoolgy_request_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_topology_5frequest_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_topology_5frequest_2eproto() {
  protobuf_AddDesc_topology_5frequest_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "topology_request.proto");
  GOOGLE_CHECK(file != NULL);
  topoolgy_request_descriptor_ = file->message_type(0);
  static const int topoolgy_request_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(topoolgy_request, target_space_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(topoolgy_request, source_space_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(topoolgy_request, source_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(topoolgy_request, max_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(topoolgy_request, p_lower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(topoolgy_request, rho_upper_),
  };
  topoolgy_request_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      topoolgy_request_descriptor_,
      topoolgy_request::internal_default_instance(),
      topoolgy_request_offsets_,
      -1,
      -1,
      -1,
      sizeof(topoolgy_request),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(topoolgy_request, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_topology_5frequest_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      topoolgy_request_descriptor_, topoolgy_request::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_topology_5frequest_2eproto() {
  topoolgy_request_default_instance_.Shutdown();
  delete topoolgy_request_reflection_;
}

void protobuf_InitDefaults_topology_5frequest_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  topoolgy_request_default_instance_.DefaultConstruct();
  topoolgy_request_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_topology_5frequest_2eproto_once_);
void protobuf_InitDefaults_topology_5frequest_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_topology_5frequest_2eproto_once_,
                 &protobuf_InitDefaults_topology_5frequest_2eproto_impl);
}
void protobuf_AddDesc_topology_5frequest_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_topology_5frequest_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026topology_request.proto\022\017molemind.sdm.i"
    "o\"\211\001\n\020topoolgy_request\022\024\n\014target_space\030\001"
    " \001(\t\022\024\n\014source_space\030\002 \001(\t\022\023\n\013source_nam"
    "e\030\003 \001(\t\022\020\n\010max_card\030\004 \001(\003\022\017\n\007p_lower\030\005 \001"
    "(\002\022\021\n\trho_upper\030\006 \001(\002b\006proto3", 189);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "topology_request.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_topology_5frequest_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_topology_5frequest_2eproto_once_);
void protobuf_AddDesc_topology_5frequest_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_topology_5frequest_2eproto_once_,
                 &protobuf_AddDesc_topology_5frequest_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_topology_5frequest_2eproto {
  StaticDescriptorInitializer_topology_5frequest_2eproto() {
    protobuf_AddDesc_topology_5frequest_2eproto();
  }
} static_descriptor_initializer_topology_5frequest_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int topoolgy_request::kTargetSpaceFieldNumber;
const int topoolgy_request::kSourceSpaceFieldNumber;
const int topoolgy_request::kSourceNameFieldNumber;
const int topoolgy_request::kMaxCardFieldNumber;
const int topoolgy_request::kPLowerFieldNumber;
const int topoolgy_request::kRhoUpperFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

topoolgy_request::topoolgy_request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_topology_5frequest_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:molemind.sdm.io.topoolgy_request)
}

void topoolgy_request::InitAsDefaultInstance() {
}

topoolgy_request::topoolgy_request(const topoolgy_request& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:molemind.sdm.io.topoolgy_request)
}

void topoolgy_request::SharedCtor() {
  target_space_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_space_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&max_card_, 0, reinterpret_cast<char*>(&rho_upper_) -
    reinterpret_cast<char*>(&max_card_) + sizeof(rho_upper_));
  _cached_size_ = 0;
}

topoolgy_request::~topoolgy_request() {
  // @@protoc_insertion_point(destructor:molemind.sdm.io.topoolgy_request)
  SharedDtor();
}

void topoolgy_request::SharedDtor() {
  target_space_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_space_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void topoolgy_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* topoolgy_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return topoolgy_request_descriptor_;
}

const topoolgy_request& topoolgy_request::default_instance() {
  protobuf_InitDefaults_topology_5frequest_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<topoolgy_request> topoolgy_request_default_instance_;

topoolgy_request* topoolgy_request::New(::google::protobuf::Arena* arena) const {
  topoolgy_request* n = new topoolgy_request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void topoolgy_request::Clear() {
// @@protoc_insertion_point(message_clear_start:molemind.sdm.io.topoolgy_request)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(topoolgy_request, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<topoolgy_request*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(max_card_, rho_upper_);
  target_space_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_space_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool topoolgy_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:molemind.sdm.io.topoolgy_request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string target_space = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_target_space()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->target_space().data(), this->target_space().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "molemind.sdm.io.topoolgy_request.target_space"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_source_space;
        break;
      }

      // optional string source_space = 2;
      case 2: {
        if (tag == 18) {
         parse_source_space:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source_space()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->source_space().data(), this->source_space().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "molemind.sdm.io.topoolgy_request.source_space"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_source_name;
        break;
      }

      // optional string source_name = 3;
      case 3: {
        if (tag == 26) {
         parse_source_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->source_name().data(), this->source_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "molemind.sdm.io.topoolgy_request.source_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_max_card;
        break;
      }

      // optional int64 max_card = 4;
      case 4: {
        if (tag == 32) {
         parse_max_card:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_card_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_p_lower;
        break;
      }

      // optional float p_lower = 5;
      case 5: {
        if (tag == 45) {
         parse_p_lower:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &p_lower_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_rho_upper;
        break;
      }

      // optional float rho_upper = 6;
      case 6: {
        if (tag == 53) {
         parse_rho_upper:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rho_upper_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:molemind.sdm.io.topoolgy_request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:molemind.sdm.io.topoolgy_request)
  return false;
#undef DO_
}

void topoolgy_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:molemind.sdm.io.topoolgy_request)
  // optional string target_space = 1;
  if (this->target_space().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->target_space().data(), this->target_space().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "molemind.sdm.io.topoolgy_request.target_space");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->target_space(), output);
  }

  // optional string source_space = 2;
  if (this->source_space().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source_space().data(), this->source_space().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "molemind.sdm.io.topoolgy_request.source_space");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->source_space(), output);
  }

  // optional string source_name = 3;
  if (this->source_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source_name().data(), this->source_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "molemind.sdm.io.topoolgy_request.source_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->source_name(), output);
  }

  // optional int64 max_card = 4;
  if (this->max_card() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->max_card(), output);
  }

  // optional float p_lower = 5;
  if (this->p_lower() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->p_lower(), output);
  }

  // optional float rho_upper = 6;
  if (this->rho_upper() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->rho_upper(), output);
  }

  // @@protoc_insertion_point(serialize_end:molemind.sdm.io.topoolgy_request)
}

::google::protobuf::uint8* topoolgy_request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:molemind.sdm.io.topoolgy_request)
  // optional string target_space = 1;
  if (this->target_space().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->target_space().data(), this->target_space().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "molemind.sdm.io.topoolgy_request.target_space");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->target_space(), target);
  }

  // optional string source_space = 2;
  if (this->source_space().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source_space().data(), this->source_space().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "molemind.sdm.io.topoolgy_request.source_space");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->source_space(), target);
  }

  // optional string source_name = 3;
  if (this->source_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source_name().data(), this->source_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "molemind.sdm.io.topoolgy_request.source_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->source_name(), target);
  }

  // optional int64 max_card = 4;
  if (this->max_card() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->max_card(), target);
  }

  // optional float p_lower = 5;
  if (this->p_lower() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->p_lower(), target);
  }

  // optional float rho_upper = 6;
  if (this->rho_upper() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->rho_upper(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:molemind.sdm.io.topoolgy_request)
  return target;
}

size_t topoolgy_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:molemind.sdm.io.topoolgy_request)
  size_t total_size = 0;

  // optional string target_space = 1;
  if (this->target_space().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->target_space());
  }

  // optional string source_space = 2;
  if (this->source_space().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->source_space());
  }

  // optional string source_name = 3;
  if (this->source_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->source_name());
  }

  // optional int64 max_card = 4;
  if (this->max_card() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->max_card());
  }

  // optional float p_lower = 5;
  if (this->p_lower() != 0) {
    total_size += 1 + 4;
  }

  // optional float rho_upper = 6;
  if (this->rho_upper() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void topoolgy_request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:molemind.sdm.io.topoolgy_request)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const topoolgy_request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const topoolgy_request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:molemind.sdm.io.topoolgy_request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:molemind.sdm.io.topoolgy_request)
    UnsafeMergeFrom(*source);
  }
}

void topoolgy_request::MergeFrom(const topoolgy_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:molemind.sdm.io.topoolgy_request)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void topoolgy_request::UnsafeMergeFrom(const topoolgy_request& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.target_space().size() > 0) {

    target_space_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.target_space_);
  }
  if (from.source_space().size() > 0) {

    source_space_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_space_);
  }
  if (from.source_name().size() > 0) {

    source_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_name_);
  }
  if (from.max_card() != 0) {
    set_max_card(from.max_card());
  }
  if (from.p_lower() != 0) {
    set_p_lower(from.p_lower());
  }
  if (from.rho_upper() != 0) {
    set_rho_upper(from.rho_upper());
  }
}

void topoolgy_request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:molemind.sdm.io.topoolgy_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void topoolgy_request::CopyFrom(const topoolgy_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:molemind.sdm.io.topoolgy_request)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool topoolgy_request::IsInitialized() const {

  return true;
}

void topoolgy_request::Swap(topoolgy_request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void topoolgy_request::InternalSwap(topoolgy_request* other) {
  target_space_.Swap(&other->target_space_);
  source_space_.Swap(&other->source_space_);
  source_name_.Swap(&other->source_name_);
  std::swap(max_card_, other->max_card_);
  std::swap(p_lower_, other->p_lower_);
  std::swap(rho_upper_, other->rho_upper_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata topoolgy_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = topoolgy_request_descriptor_;
  metadata.reflection = topoolgy_request_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// topoolgy_request

// optional string target_space = 1;
void topoolgy_request::clear_target_space() {
  target_space_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& topoolgy_request::target_space() const {
  // @@protoc_insertion_point(field_get:molemind.sdm.io.topoolgy_request.target_space)
  return target_space_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void topoolgy_request::set_target_space(const ::std::string& value) {
  
  target_space_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:molemind.sdm.io.topoolgy_request.target_space)
}
void topoolgy_request::set_target_space(const char* value) {
  
  target_space_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:molemind.sdm.io.topoolgy_request.target_space)
}
void topoolgy_request::set_target_space(const char* value, size_t size) {
  
  target_space_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:molemind.sdm.io.topoolgy_request.target_space)
}
::std::string* topoolgy_request::mutable_target_space() {
  
  // @@protoc_insertion_point(field_mutable:molemind.sdm.io.topoolgy_request.target_space)
  return target_space_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* topoolgy_request::release_target_space() {
  // @@protoc_insertion_point(field_release:molemind.sdm.io.topoolgy_request.target_space)
  
  return target_space_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void topoolgy_request::set_allocated_target_space(::std::string* target_space) {
  if (target_space != NULL) {
    
  } else {
    
  }
  target_space_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), target_space);
  // @@protoc_insertion_point(field_set_allocated:molemind.sdm.io.topoolgy_request.target_space)
}

// optional string source_space = 2;
void topoolgy_request::clear_source_space() {
  source_space_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& topoolgy_request::source_space() const {
  // @@protoc_insertion_point(field_get:molemind.sdm.io.topoolgy_request.source_space)
  return source_space_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void topoolgy_request::set_source_space(const ::std::string& value) {
  
  source_space_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:molemind.sdm.io.topoolgy_request.source_space)
}
void topoolgy_request::set_source_space(const char* value) {
  
  source_space_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:molemind.sdm.io.topoolgy_request.source_space)
}
void topoolgy_request::set_source_space(const char* value, size_t size) {
  
  source_space_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:molemind.sdm.io.topoolgy_request.source_space)
}
::std::string* topoolgy_request::mutable_source_space() {
  
  // @@protoc_insertion_point(field_mutable:molemind.sdm.io.topoolgy_request.source_space)
  return source_space_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* topoolgy_request::release_source_space() {
  // @@protoc_insertion_point(field_release:molemind.sdm.io.topoolgy_request.source_space)
  
  return source_space_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void topoolgy_request::set_allocated_source_space(::std::string* source_space) {
  if (source_space != NULL) {
    
  } else {
    
  }
  source_space_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source_space);
  // @@protoc_insertion_point(field_set_allocated:molemind.sdm.io.topoolgy_request.source_space)
}

// optional string source_name = 3;
void topoolgy_request::clear_source_name() {
  source_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& topoolgy_request::source_name() const {
  // @@protoc_insertion_point(field_get:molemind.sdm.io.topoolgy_request.source_name)
  return source_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void topoolgy_request::set_source_name(const ::std::string& value) {
  
  source_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:molemind.sdm.io.topoolgy_request.source_name)
}
void topoolgy_request::set_source_name(const char* value) {
  
  source_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:molemind.sdm.io.topoolgy_request.source_name)
}
void topoolgy_request::set_source_name(const char* value, size_t size) {
  
  source_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:molemind.sdm.io.topoolgy_request.source_name)
}
::std::string* topoolgy_request::mutable_source_name() {
  
  // @@protoc_insertion_point(field_mutable:molemind.sdm.io.topoolgy_request.source_name)
  return source_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* topoolgy_request::release_source_name() {
  // @@protoc_insertion_point(field_release:molemind.sdm.io.topoolgy_request.source_name)
  
  return source_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void topoolgy_request::set_allocated_source_name(::std::string* source_name) {
  if (source_name != NULL) {
    
  } else {
    
  }
  source_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source_name);
  // @@protoc_insertion_point(field_set_allocated:molemind.sdm.io.topoolgy_request.source_name)
}

// optional int64 max_card = 4;
void topoolgy_request::clear_max_card() {
  max_card_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 topoolgy_request::max_card() const {
  // @@protoc_insertion_point(field_get:molemind.sdm.io.topoolgy_request.max_card)
  return max_card_;
}
void topoolgy_request::set_max_card(::google::protobuf::int64 value) {
  
  max_card_ = value;
  // @@protoc_insertion_point(field_set:molemind.sdm.io.topoolgy_request.max_card)
}

// optional float p_lower = 5;
void topoolgy_request::clear_p_lower() {
  p_lower_ = 0;
}
float topoolgy_request::p_lower() const {
  // @@protoc_insertion_point(field_get:molemind.sdm.io.topoolgy_request.p_lower)
  return p_lower_;
}
void topoolgy_request::set_p_lower(float value) {
  
  p_lower_ = value;
  // @@protoc_insertion_point(field_set:molemind.sdm.io.topoolgy_request.p_lower)
}

// optional float rho_upper = 6;
void topoolgy_request::clear_rho_upper() {
  rho_upper_ = 0;
}
float topoolgy_request::rho_upper() const {
  // @@protoc_insertion_point(field_get:molemind.sdm.io.topoolgy_request.rho_upper)
  return rho_upper_;
}
void topoolgy_request::set_rho_upper(float value) {
  
  rho_upper_ = value;
  // @@protoc_insertion_point(field_set:molemind.sdm.io.topoolgy_request.rho_upper)
}

inline const topoolgy_request* topoolgy_request::internal_default_instance() {
  return &topoolgy_request_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace io
}  // namespace sdm
}  // namespace molemind

// @@protoc_insertion_point(global_scope)
